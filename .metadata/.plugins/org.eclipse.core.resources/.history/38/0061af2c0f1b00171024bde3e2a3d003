package edu.utc.bkf926.WorldStream;

import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

public class WSStreamingServer extends WebSocketServer{
	
	private static WSStreamingServer instance;
	public static WSStreamingServer getInstance(){
		return instance;
	}
	
	public static void startServer(){
		int port = WSServerPlugin.config.getInt("websockets-port");
		instance = new WSStreamingServer(new InetSocketAddress(port));
		instance.start();
	}

	public WSStreamingServer(InetSocketAddress address){
		super(address);
		connections = new ArrayList<WebSocket>();
	}
	
	private List<WebSocket> connections;

	@Override
	public void onClose(WebSocket arg0, int arg1, String arg2, boolean arg3) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onError(WebSocket arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onMessage(WebSocket arg0, String arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onOpen(WebSocket arg0, ClientHandshake arg1) {
		Bukkit.getLogger().info("[WorldStream] WebSocket client connected from "+arg0.getRemoteSocketAddress().toString());
		connections.add(arg0);
	}
	
	private static class WSStreamingSession {
		WebSocket connection;
		World world;
		Chunk chunk;
	}
	
	public void broadcastBlockChange(Block block){
		for (WebSocket socket : connections){
			socket.send(WSJson.getBlockJSON(block).getBytes());
		}
	}
	
}
